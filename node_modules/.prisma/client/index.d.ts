
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "User"
  objects: {
    Token: TokenPayload<ExtArgs>[]
    createdTranslates: TranslatePayload<ExtArgs>[]
    updatedTranslates: TranslatePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    username: string
    name: string
    secondname: string
    password: string
    gener: Avatar
    type: UserType
    theme: ThemePage
    status: UserStatus
    createdAt: Date
    updatedAt: Date
    idUserCreated: number
    idUserUpdated: number
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model User
 * 
 */
export type User = runtime.Types.DefaultSelection<UserPayload>
export type TranslatePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Translate"
  objects: {
    userCreated: UserPayload<ExtArgs>
    userUpdated: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    keyword: string
    ptbr: string
    enus: string
    esch: string
    createdAt: Date
    updatedAt: Date
    idUserCreated: number
    idUserUpdated: number
  }, ExtArgs["result"]["translate"]>
  composites: {}
}

/**
 * Model Translate
 * 
 */
export type Translate = runtime.Types.DefaultSelection<TranslatePayload>
export type TokenPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Token"
  objects: {
    client: ClientPayload<ExtArgs>
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    accessToken: string
    accessTokenExpires: Date
    refreshToken: string
    refreshTokenExpires: Date
    clientName: string
    username: string
    scope: string
    revoked: boolean
  }, ExtArgs["result"]["token"]>
  composites: {}
}

/**
 * Model Token
 * 
 */
export type Token = runtime.Types.DefaultSelection<TokenPayload>
export type ClientPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Client"
  objects: {
    tokens: TokenPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    secret: string
  }, ExtArgs["result"]["client"]>
  composites: {}
}

/**
 * Model Client
 * 
 */
export type Client = runtime.Types.DefaultSelection<ClientPayload>

/**
 * Enums
 */

export const Avatar: {
  female: 'female',
  male: 'male',
  others: 'others'
};

export type Avatar = (typeof Avatar)[keyof typeof Avatar]


export const UserType: {
  admin: 'admin',
  develop: 'develop'
};

export type UserType = (typeof UserType)[keyof typeof UserType]


export const ThemePage: {
  dark: 'dark',
  light: 'light'
};

export type ThemePage = (typeof ThemePage)[keyof typeof ThemePage]


export const UserStatus: {
  ativo: 'ativo',
  inativo: 'inativo'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.translate`: Exposes CRUD operations for the **Translate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Translates
    * const translates = await prisma.translate.findMany()
    * ```
    */
  get translate(): Prisma.TranslateDelegate<ExtArgs>;

  /**
   * `prisma.token`: Exposes CRUD operations for the **Token** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tokens
    * const tokens = await prisma.token.findMany()
    * ```
    */
  get token(): Prisma.TokenDelegate<ExtArgs>;

  /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.ClientDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 5.0.0
   * Query Engine version: 6b0aef69b7cdfc787f822ecd7cdc76d5f1991584
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Translate: 'Translate',
    Token: 'Token',
    Client: 'Client'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'translate' | 'token' | 'client'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Translate: {
        payload: TranslatePayload<ExtArgs>
        fields: Prisma.TranslateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TranslateFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TranslatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TranslateFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TranslatePayload>
          }
          findFirst: {
            args: Prisma.TranslateFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TranslatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TranslateFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TranslatePayload>
          }
          findMany: {
            args: Prisma.TranslateFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TranslatePayload>[]
          }
          create: {
            args: Prisma.TranslateCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TranslatePayload>
          }
          createMany: {
            args: Prisma.TranslateCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TranslateDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TranslatePayload>
          }
          update: {
            args: Prisma.TranslateUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TranslatePayload>
          }
          deleteMany: {
            args: Prisma.TranslateDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TranslateUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TranslateUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TranslatePayload>
          }
          aggregate: {
            args: Prisma.TranslateAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTranslate>
          }
          groupBy: {
            args: Prisma.TranslateGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TranslateGroupByOutputType>[]
          }
          count: {
            args: Prisma.TranslateCountArgs<ExtArgs>,
            result: $Utils.Optional<TranslateCountAggregateOutputType> | number
          }
        }
      }
      Token: {
        payload: TokenPayload<ExtArgs>
        fields: Prisma.TokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TokenFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TokenFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TokenPayload>
          }
          findFirst: {
            args: Prisma.TokenFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TokenFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TokenPayload>
          }
          findMany: {
            args: Prisma.TokenFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TokenPayload>[]
          }
          create: {
            args: Prisma.TokenCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TokenPayload>
          }
          createMany: {
            args: Prisma.TokenCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TokenDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TokenPayload>
          }
          update: {
            args: Prisma.TokenUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TokenPayload>
          }
          deleteMany: {
            args: Prisma.TokenDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TokenUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TokenUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TokenPayload>
          }
          aggregate: {
            args: Prisma.TokenAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateToken>
          }
          groupBy: {
            args: Prisma.TokenGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.TokenCountArgs<ExtArgs>,
            result: $Utils.Optional<TokenCountAggregateOutputType> | number
          }
        }
      }
      Client: {
        payload: ClientPayload<ExtArgs>
        fields: Prisma.ClientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientPayload>
          }
          findFirst: {
            args: Prisma.ClientFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientPayload>
          }
          findMany: {
            args: Prisma.ClientFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientPayload>[]
          }
          create: {
            args: Prisma.ClientCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientPayload>
          }
          createMany: {
            args: Prisma.ClientCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ClientDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientPayload>
          }
          update: {
            args: Prisma.ClientUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientPayload>
          }
          deleteMany: {
            args: Prisma.ClientDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ClientUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ClientUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientPayload>
          }
          aggregate: {
            args: Prisma.ClientAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateClient>
          }
          groupBy: {
            args: Prisma.ClientGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClientGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientCountArgs<ExtArgs>,
            result: $Utils.Optional<ClientCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Token: number
    createdTranslates: number
    updatedTranslates: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Token?: boolean | UserCountOutputTypeCountTokenArgs
    createdTranslates?: boolean | UserCountOutputTypeCountCreatedTranslatesArgs
    updatedTranslates?: boolean | UserCountOutputTypeCountUpdatedTranslatesArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTokenArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TokenWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedTranslatesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TranslateWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedTranslatesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TranslateWhereInput
  }



  /**
   * Count Type ClientCountOutputType
   */


  export type ClientCountOutputType = {
    tokens: number
  }

  export type ClientCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    tokens?: boolean | ClientCountOutputTypeCountTokensArgs
  }

  // Custom InputTypes

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     */
    select?: ClientCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountTokensArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TokenWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    idUserCreated: number | null
    idUserUpdated: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    idUserCreated: number | null
    idUserUpdated: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    name: string | null
    secondname: string | null
    password: string | null
    gener: Avatar | null
    type: UserType | null
    theme: ThemePage | null
    status: UserStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    idUserCreated: number | null
    idUserUpdated: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    name: string | null
    secondname: string | null
    password: string | null
    gener: Avatar | null
    type: UserType | null
    theme: ThemePage | null
    status: UserStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    idUserCreated: number | null
    idUserUpdated: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    name: number
    secondname: number
    password: number
    gener: number
    type: number
    theme: number
    status: number
    createdAt: number
    updatedAt: number
    idUserCreated: number
    idUserUpdated: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    idUserCreated?: true
    idUserUpdated?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    idUserCreated?: true
    idUserUpdated?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    name?: true
    secondname?: true
    password?: true
    gener?: true
    type?: true
    theme?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    idUserCreated?: true
    idUserUpdated?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    name?: true
    secondname?: true
    password?: true
    gener?: true
    type?: true
    theme?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    idUserCreated?: true
    idUserUpdated?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    name?: true
    secondname?: true
    password?: true
    gener?: true
    type?: true
    theme?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    idUserCreated?: true
    idUserUpdated?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    username: string
    name: string
    secondname: string
    password: string
    gener: Avatar
    type: UserType
    theme: ThemePage
    status: UserStatus
    createdAt: Date
    updatedAt: Date
    idUserCreated: number
    idUserUpdated: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    name?: boolean
    secondname?: boolean
    password?: boolean
    gener?: boolean
    type?: boolean
    theme?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    idUserCreated?: boolean
    idUserUpdated?: boolean
    Token?: boolean | User$TokenArgs<ExtArgs>
    createdTranslates?: boolean | User$createdTranslatesArgs<ExtArgs>
    updatedTranslates?: boolean | User$updatedTranslatesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    name?: boolean
    secondname?: boolean
    password?: boolean
    gener?: boolean
    type?: boolean
    theme?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    idUserCreated?: boolean
    idUserUpdated?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Token?: boolean | User$TokenArgs<ExtArgs>
    createdTranslates?: boolean | User$createdTranslatesArgs<ExtArgs>
    updatedTranslates?: boolean | User$updatedTranslatesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }


  type UserGetPayload<S extends boolean | null | undefined | UserArgs> = $Types.GetResult<UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Token<T extends User$TokenArgs<ExtArgs> = {}>(args?: Subset<T, User$TokenArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<TokenPayload<ExtArgs>, T, 'findMany'>| Null>;

    createdTranslates<T extends User$createdTranslatesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdTranslatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<TranslatePayload<ExtArgs>, T, 'findMany'>| Null>;

    updatedTranslates<T extends User$updatedTranslatesArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedTranslatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<TranslatePayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly secondname: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly gener: FieldRef<"User", 'Avatar'>
    readonly type: FieldRef<"User", 'UserType'>
    readonly theme: FieldRef<"User", 'ThemePage'>
    readonly status: FieldRef<"User", 'UserStatus'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly idUserCreated: FieldRef<"User", 'Int'>
    readonly idUserUpdated: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.Token
   */
  export type User$TokenArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokenInclude<ExtArgs> | null
    where?: TokenWhereInput
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    cursor?: TokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }


  /**
   * User.createdTranslates
   */
  export type User$createdTranslatesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translate
     */
    select?: TranslateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslateInclude<ExtArgs> | null
    where?: TranslateWhereInput
    orderBy?: TranslateOrderByWithRelationInput | TranslateOrderByWithRelationInput[]
    cursor?: TranslateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TranslateScalarFieldEnum | TranslateScalarFieldEnum[]
  }


  /**
   * User.updatedTranslates
   */
  export type User$updatedTranslatesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translate
     */
    select?: TranslateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslateInclude<ExtArgs> | null
    where?: TranslateWhereInput
    orderBy?: TranslateOrderByWithRelationInput | TranslateOrderByWithRelationInput[]
    cursor?: TranslateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TranslateScalarFieldEnum | TranslateScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Translate
   */


  export type AggregateTranslate = {
    _count: TranslateCountAggregateOutputType | null
    _avg: TranslateAvgAggregateOutputType | null
    _sum: TranslateSumAggregateOutputType | null
    _min: TranslateMinAggregateOutputType | null
    _max: TranslateMaxAggregateOutputType | null
  }

  export type TranslateAvgAggregateOutputType = {
    id: number | null
    idUserCreated: number | null
    idUserUpdated: number | null
  }

  export type TranslateSumAggregateOutputType = {
    id: number | null
    idUserCreated: number | null
    idUserUpdated: number | null
  }

  export type TranslateMinAggregateOutputType = {
    id: number | null
    keyword: string | null
    ptbr: string | null
    enus: string | null
    esch: string | null
    createdAt: Date | null
    updatedAt: Date | null
    idUserCreated: number | null
    idUserUpdated: number | null
  }

  export type TranslateMaxAggregateOutputType = {
    id: number | null
    keyword: string | null
    ptbr: string | null
    enus: string | null
    esch: string | null
    createdAt: Date | null
    updatedAt: Date | null
    idUserCreated: number | null
    idUserUpdated: number | null
  }

  export type TranslateCountAggregateOutputType = {
    id: number
    keyword: number
    ptbr: number
    enus: number
    esch: number
    createdAt: number
    updatedAt: number
    idUserCreated: number
    idUserUpdated: number
    _all: number
  }


  export type TranslateAvgAggregateInputType = {
    id?: true
    idUserCreated?: true
    idUserUpdated?: true
  }

  export type TranslateSumAggregateInputType = {
    id?: true
    idUserCreated?: true
    idUserUpdated?: true
  }

  export type TranslateMinAggregateInputType = {
    id?: true
    keyword?: true
    ptbr?: true
    enus?: true
    esch?: true
    createdAt?: true
    updatedAt?: true
    idUserCreated?: true
    idUserUpdated?: true
  }

  export type TranslateMaxAggregateInputType = {
    id?: true
    keyword?: true
    ptbr?: true
    enus?: true
    esch?: true
    createdAt?: true
    updatedAt?: true
    idUserCreated?: true
    idUserUpdated?: true
  }

  export type TranslateCountAggregateInputType = {
    id?: true
    keyword?: true
    ptbr?: true
    enus?: true
    esch?: true
    createdAt?: true
    updatedAt?: true
    idUserCreated?: true
    idUserUpdated?: true
    _all?: true
  }

  export type TranslateAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Translate to aggregate.
     */
    where?: TranslateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Translates to fetch.
     */
    orderBy?: TranslateOrderByWithRelationInput | TranslateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TranslateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Translates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Translates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Translates
    **/
    _count?: true | TranslateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TranslateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TranslateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TranslateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TranslateMaxAggregateInputType
  }

  export type GetTranslateAggregateType<T extends TranslateAggregateArgs> = {
        [P in keyof T & keyof AggregateTranslate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTranslate[P]>
      : GetScalarType<T[P], AggregateTranslate[P]>
  }




  export type TranslateGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TranslateWhereInput
    orderBy?: TranslateOrderByWithAggregationInput | TranslateOrderByWithAggregationInput[]
    by: TranslateScalarFieldEnum[] | TranslateScalarFieldEnum
    having?: TranslateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TranslateCountAggregateInputType | true
    _avg?: TranslateAvgAggregateInputType
    _sum?: TranslateSumAggregateInputType
    _min?: TranslateMinAggregateInputType
    _max?: TranslateMaxAggregateInputType
  }


  export type TranslateGroupByOutputType = {
    id: number
    keyword: string
    ptbr: string
    enus: string
    esch: string
    createdAt: Date
    updatedAt: Date
    idUserCreated: number
    idUserUpdated: number
    _count: TranslateCountAggregateOutputType | null
    _avg: TranslateAvgAggregateOutputType | null
    _sum: TranslateSumAggregateOutputType | null
    _min: TranslateMinAggregateOutputType | null
    _max: TranslateMaxAggregateOutputType | null
  }

  type GetTranslateGroupByPayload<T extends TranslateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TranslateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TranslateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TranslateGroupByOutputType[P]>
            : GetScalarType<T[P], TranslateGroupByOutputType[P]>
        }
      >
    >


  export type TranslateSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    keyword?: boolean
    ptbr?: boolean
    enus?: boolean
    esch?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    idUserCreated?: boolean
    idUserUpdated?: boolean
    userCreated?: boolean | UserArgs<ExtArgs>
    userUpdated?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["translate"]>

  export type TranslateSelectScalar = {
    id?: boolean
    keyword?: boolean
    ptbr?: boolean
    enus?: boolean
    esch?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    idUserCreated?: boolean
    idUserUpdated?: boolean
  }

  export type TranslateInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    userCreated?: boolean | UserArgs<ExtArgs>
    userUpdated?: boolean | UserArgs<ExtArgs>
  }


  type TranslateGetPayload<S extends boolean | null | undefined | TranslateArgs> = $Types.GetResult<TranslatePayload, S>

  type TranslateCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TranslateFindManyArgs, 'select' | 'include'> & {
      select?: TranslateCountAggregateInputType | true
    }

  export interface TranslateDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Translate'], meta: { name: 'Translate' } }
    /**
     * Find zero or one Translate that matches the filter.
     * @param {TranslateFindUniqueArgs} args - Arguments to find a Translate
     * @example
     * // Get one Translate
     * const translate = await prisma.translate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TranslateFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TranslateFindUniqueArgs<ExtArgs>>
    ): Prisma__TranslateClient<$Types.GetResult<TranslatePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Translate that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TranslateFindUniqueOrThrowArgs} args - Arguments to find a Translate
     * @example
     * // Get one Translate
     * const translate = await prisma.translate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TranslateFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TranslateFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TranslateClient<$Types.GetResult<TranslatePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Translate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranslateFindFirstArgs} args - Arguments to find a Translate
     * @example
     * // Get one Translate
     * const translate = await prisma.translate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TranslateFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TranslateFindFirstArgs<ExtArgs>>
    ): Prisma__TranslateClient<$Types.GetResult<TranslatePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Translate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranslateFindFirstOrThrowArgs} args - Arguments to find a Translate
     * @example
     * // Get one Translate
     * const translate = await prisma.translate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TranslateFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TranslateFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TranslateClient<$Types.GetResult<TranslatePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Translates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranslateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Translates
     * const translates = await prisma.translate.findMany()
     * 
     * // Get first 10 Translates
     * const translates = await prisma.translate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const translateWithIdOnly = await prisma.translate.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TranslateFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TranslateFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<TranslatePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Translate.
     * @param {TranslateCreateArgs} args - Arguments to create a Translate.
     * @example
     * // Create one Translate
     * const Translate = await prisma.translate.create({
     *   data: {
     *     // ... data to create a Translate
     *   }
     * })
     * 
    **/
    create<T extends TranslateCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TranslateCreateArgs<ExtArgs>>
    ): Prisma__TranslateClient<$Types.GetResult<TranslatePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Translates.
     *     @param {TranslateCreateManyArgs} args - Arguments to create many Translates.
     *     @example
     *     // Create many Translates
     *     const translate = await prisma.translate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TranslateCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TranslateCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Translate.
     * @param {TranslateDeleteArgs} args - Arguments to delete one Translate.
     * @example
     * // Delete one Translate
     * const Translate = await prisma.translate.delete({
     *   where: {
     *     // ... filter to delete one Translate
     *   }
     * })
     * 
    **/
    delete<T extends TranslateDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TranslateDeleteArgs<ExtArgs>>
    ): Prisma__TranslateClient<$Types.GetResult<TranslatePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Translate.
     * @param {TranslateUpdateArgs} args - Arguments to update one Translate.
     * @example
     * // Update one Translate
     * const translate = await prisma.translate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TranslateUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TranslateUpdateArgs<ExtArgs>>
    ): Prisma__TranslateClient<$Types.GetResult<TranslatePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Translates.
     * @param {TranslateDeleteManyArgs} args - Arguments to filter Translates to delete.
     * @example
     * // Delete a few Translates
     * const { count } = await prisma.translate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TranslateDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TranslateDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Translates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranslateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Translates
     * const translate = await prisma.translate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TranslateUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TranslateUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Translate.
     * @param {TranslateUpsertArgs} args - Arguments to update or create a Translate.
     * @example
     * // Update or create a Translate
     * const translate = await prisma.translate.upsert({
     *   create: {
     *     // ... data to create a Translate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Translate we want to update
     *   }
     * })
    **/
    upsert<T extends TranslateUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TranslateUpsertArgs<ExtArgs>>
    ): Prisma__TranslateClient<$Types.GetResult<TranslatePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Translates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranslateCountArgs} args - Arguments to filter Translates to count.
     * @example
     * // Count the number of Translates
     * const count = await prisma.translate.count({
     *   where: {
     *     // ... the filter for the Translates we want to count
     *   }
     * })
    **/
    count<T extends TranslateCountArgs>(
      args?: Subset<T, TranslateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TranslateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Translate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranslateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TranslateAggregateArgs>(args: Subset<T, TranslateAggregateArgs>): Prisma.PrismaPromise<GetTranslateAggregateType<T>>

    /**
     * Group by Translate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranslateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TranslateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TranslateGroupByArgs['orderBy'] }
        : { orderBy?: TranslateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TranslateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTranslateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Translate model
   */
  readonly fields: TranslateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Translate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TranslateClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    userCreated<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    userUpdated<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Translate model
   */ 
  interface TranslateFieldRefs {
    readonly id: FieldRef<"Translate", 'Int'>
    readonly keyword: FieldRef<"Translate", 'String'>
    readonly ptbr: FieldRef<"Translate", 'String'>
    readonly enus: FieldRef<"Translate", 'String'>
    readonly esch: FieldRef<"Translate", 'String'>
    readonly createdAt: FieldRef<"Translate", 'DateTime'>
    readonly updatedAt: FieldRef<"Translate", 'DateTime'>
    readonly idUserCreated: FieldRef<"Translate", 'Int'>
    readonly idUserUpdated: FieldRef<"Translate", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Translate findUnique
   */
  export type TranslateFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translate
     */
    select?: TranslateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslateInclude<ExtArgs> | null
    /**
     * Filter, which Translate to fetch.
     */
    where: TranslateWhereUniqueInput
  }


  /**
   * Translate findUniqueOrThrow
   */
  export type TranslateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translate
     */
    select?: TranslateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslateInclude<ExtArgs> | null
    /**
     * Filter, which Translate to fetch.
     */
    where: TranslateWhereUniqueInput
  }


  /**
   * Translate findFirst
   */
  export type TranslateFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translate
     */
    select?: TranslateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslateInclude<ExtArgs> | null
    /**
     * Filter, which Translate to fetch.
     */
    where?: TranslateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Translates to fetch.
     */
    orderBy?: TranslateOrderByWithRelationInput | TranslateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Translates.
     */
    cursor?: TranslateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Translates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Translates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Translates.
     */
    distinct?: TranslateScalarFieldEnum | TranslateScalarFieldEnum[]
  }


  /**
   * Translate findFirstOrThrow
   */
  export type TranslateFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translate
     */
    select?: TranslateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslateInclude<ExtArgs> | null
    /**
     * Filter, which Translate to fetch.
     */
    where?: TranslateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Translates to fetch.
     */
    orderBy?: TranslateOrderByWithRelationInput | TranslateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Translates.
     */
    cursor?: TranslateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Translates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Translates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Translates.
     */
    distinct?: TranslateScalarFieldEnum | TranslateScalarFieldEnum[]
  }


  /**
   * Translate findMany
   */
  export type TranslateFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translate
     */
    select?: TranslateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslateInclude<ExtArgs> | null
    /**
     * Filter, which Translates to fetch.
     */
    where?: TranslateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Translates to fetch.
     */
    orderBy?: TranslateOrderByWithRelationInput | TranslateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Translates.
     */
    cursor?: TranslateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Translates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Translates.
     */
    skip?: number
    distinct?: TranslateScalarFieldEnum | TranslateScalarFieldEnum[]
  }


  /**
   * Translate create
   */
  export type TranslateCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translate
     */
    select?: TranslateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslateInclude<ExtArgs> | null
    /**
     * The data needed to create a Translate.
     */
    data: XOR<TranslateCreateInput, TranslateUncheckedCreateInput>
  }


  /**
   * Translate createMany
   */
  export type TranslateCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Translates.
     */
    data: TranslateCreateManyInput | TranslateCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Translate update
   */
  export type TranslateUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translate
     */
    select?: TranslateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslateInclude<ExtArgs> | null
    /**
     * The data needed to update a Translate.
     */
    data: XOR<TranslateUpdateInput, TranslateUncheckedUpdateInput>
    /**
     * Choose, which Translate to update.
     */
    where: TranslateWhereUniqueInput
  }


  /**
   * Translate updateMany
   */
  export type TranslateUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Translates.
     */
    data: XOR<TranslateUpdateManyMutationInput, TranslateUncheckedUpdateManyInput>
    /**
     * Filter which Translates to update
     */
    where?: TranslateWhereInput
  }


  /**
   * Translate upsert
   */
  export type TranslateUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translate
     */
    select?: TranslateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslateInclude<ExtArgs> | null
    /**
     * The filter to search for the Translate to update in case it exists.
     */
    where: TranslateWhereUniqueInput
    /**
     * In case the Translate found by the `where` argument doesn't exist, create a new Translate with this data.
     */
    create: XOR<TranslateCreateInput, TranslateUncheckedCreateInput>
    /**
     * In case the Translate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TranslateUpdateInput, TranslateUncheckedUpdateInput>
  }


  /**
   * Translate delete
   */
  export type TranslateDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translate
     */
    select?: TranslateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslateInclude<ExtArgs> | null
    /**
     * Filter which Translate to delete.
     */
    where: TranslateWhereUniqueInput
  }


  /**
   * Translate deleteMany
   */
  export type TranslateDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Translates to delete
     */
    where?: TranslateWhereInput
  }


  /**
   * Translate without action
   */
  export type TranslateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translate
     */
    select?: TranslateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslateInclude<ExtArgs> | null
  }



  /**
   * Model Token
   */


  export type AggregateToken = {
    _count: TokenCountAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  export type TokenMinAggregateOutputType = {
    accessToken: string | null
    accessTokenExpires: Date | null
    refreshToken: string | null
    refreshTokenExpires: Date | null
    clientName: string | null
    username: string | null
    scope: string | null
    revoked: boolean | null
  }

  export type TokenMaxAggregateOutputType = {
    accessToken: string | null
    accessTokenExpires: Date | null
    refreshToken: string | null
    refreshTokenExpires: Date | null
    clientName: string | null
    username: string | null
    scope: string | null
    revoked: boolean | null
  }

  export type TokenCountAggregateOutputType = {
    accessToken: number
    accessTokenExpires: number
    refreshToken: number
    refreshTokenExpires: number
    clientName: number
    username: number
    scope: number
    revoked: number
    _all: number
  }


  export type TokenMinAggregateInputType = {
    accessToken?: true
    accessTokenExpires?: true
    refreshToken?: true
    refreshTokenExpires?: true
    clientName?: true
    username?: true
    scope?: true
    revoked?: true
  }

  export type TokenMaxAggregateInputType = {
    accessToken?: true
    accessTokenExpires?: true
    refreshToken?: true
    refreshTokenExpires?: true
    clientName?: true
    username?: true
    scope?: true
    revoked?: true
  }

  export type TokenCountAggregateInputType = {
    accessToken?: true
    accessTokenExpires?: true
    refreshToken?: true
    refreshTokenExpires?: true
    clientName?: true
    username?: true
    scope?: true
    revoked?: true
    _all?: true
  }

  export type TokenAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Token to aggregate.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tokens
    **/
    _count?: true | TokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokenMaxAggregateInputType
  }

  export type GetTokenAggregateType<T extends TokenAggregateArgs> = {
        [P in keyof T & keyof AggregateToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateToken[P]>
      : GetScalarType<T[P], AggregateToken[P]>
  }




  export type TokenGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TokenWhereInput
    orderBy?: TokenOrderByWithAggregationInput | TokenOrderByWithAggregationInput[]
    by: TokenScalarFieldEnum[] | TokenScalarFieldEnum
    having?: TokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokenCountAggregateInputType | true
    _min?: TokenMinAggregateInputType
    _max?: TokenMaxAggregateInputType
  }


  export type TokenGroupByOutputType = {
    accessToken: string
    accessTokenExpires: Date
    refreshToken: string
    refreshTokenExpires: Date
    clientName: string
    username: string
    scope: string
    revoked: boolean
    _count: TokenCountAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  type GetTokenGroupByPayload<T extends TokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokenGroupByOutputType[P]>
            : GetScalarType<T[P], TokenGroupByOutputType[P]>
        }
      >
    >


  export type TokenSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    accessToken?: boolean
    accessTokenExpires?: boolean
    refreshToken?: boolean
    refreshTokenExpires?: boolean
    clientName?: boolean
    username?: boolean
    scope?: boolean
    revoked?: boolean
    client?: boolean | ClientArgs<ExtArgs>
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["token"]>

  export type TokenSelectScalar = {
    accessToken?: boolean
    accessTokenExpires?: boolean
    refreshToken?: boolean
    refreshTokenExpires?: boolean
    clientName?: boolean
    username?: boolean
    scope?: boolean
    revoked?: boolean
  }

  export type TokenInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    client?: boolean | ClientArgs<ExtArgs>
    user?: boolean | UserArgs<ExtArgs>
  }


  type TokenGetPayload<S extends boolean | null | undefined | TokenArgs> = $Types.GetResult<TokenPayload, S>

  type TokenCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TokenFindManyArgs, 'select' | 'include'> & {
      select?: TokenCountAggregateInputType | true
    }

  export interface TokenDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Token'], meta: { name: 'Token' } }
    /**
     * Find zero or one Token that matches the filter.
     * @param {TokenFindUniqueArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TokenFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TokenFindUniqueArgs<ExtArgs>>
    ): Prisma__TokenClient<$Types.GetResult<TokenPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Token that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TokenFindUniqueOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TokenFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TokenFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TokenClient<$Types.GetResult<TokenPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Token that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TokenFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TokenFindFirstArgs<ExtArgs>>
    ): Prisma__TokenClient<$Types.GetResult<TokenPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Token that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TokenFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TokenFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TokenClient<$Types.GetResult<TokenPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tokens
     * const tokens = await prisma.token.findMany()
     * 
     * // Get first 10 Tokens
     * const tokens = await prisma.token.findMany({ take: 10 })
     * 
     * // Only select the `accessToken`
     * const tokenWithAccessTokenOnly = await prisma.token.findMany({ select: { accessToken: true } })
     * 
    **/
    findMany<T extends TokenFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TokenFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<TokenPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Token.
     * @param {TokenCreateArgs} args - Arguments to create a Token.
     * @example
     * // Create one Token
     * const Token = await prisma.token.create({
     *   data: {
     *     // ... data to create a Token
     *   }
     * })
     * 
    **/
    create<T extends TokenCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TokenCreateArgs<ExtArgs>>
    ): Prisma__TokenClient<$Types.GetResult<TokenPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tokens.
     *     @param {TokenCreateManyArgs} args - Arguments to create many Tokens.
     *     @example
     *     // Create many Tokens
     *     const token = await prisma.token.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TokenCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TokenCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Token.
     * @param {TokenDeleteArgs} args - Arguments to delete one Token.
     * @example
     * // Delete one Token
     * const Token = await prisma.token.delete({
     *   where: {
     *     // ... filter to delete one Token
     *   }
     * })
     * 
    **/
    delete<T extends TokenDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TokenDeleteArgs<ExtArgs>>
    ): Prisma__TokenClient<$Types.GetResult<TokenPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Token.
     * @param {TokenUpdateArgs} args - Arguments to update one Token.
     * @example
     * // Update one Token
     * const token = await prisma.token.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TokenUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TokenUpdateArgs<ExtArgs>>
    ): Prisma__TokenClient<$Types.GetResult<TokenPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tokens.
     * @param {TokenDeleteManyArgs} args - Arguments to filter Tokens to delete.
     * @example
     * // Delete a few Tokens
     * const { count } = await prisma.token.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TokenDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TokenDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tokens
     * const token = await prisma.token.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TokenUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TokenUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Token.
     * @param {TokenUpsertArgs} args - Arguments to update or create a Token.
     * @example
     * // Update or create a Token
     * const token = await prisma.token.upsert({
     *   create: {
     *     // ... data to create a Token
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Token we want to update
     *   }
     * })
    **/
    upsert<T extends TokenUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TokenUpsertArgs<ExtArgs>>
    ): Prisma__TokenClient<$Types.GetResult<TokenPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenCountArgs} args - Arguments to filter Tokens to count.
     * @example
     * // Count the number of Tokens
     * const count = await prisma.token.count({
     *   where: {
     *     // ... the filter for the Tokens we want to count
     *   }
     * })
    **/
    count<T extends TokenCountArgs>(
      args?: Subset<T, TokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokenAggregateArgs>(args: Subset<T, TokenAggregateArgs>): Prisma.PrismaPromise<GetTokenAggregateType<T>>

    /**
     * Group by Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokenGroupByArgs['orderBy'] }
        : { orderBy?: TokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Token model
   */
  readonly fields: TokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Token.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TokenClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    client<T extends ClientArgs<ExtArgs> = {}>(args?: Subset<T, ClientArgs<ExtArgs>>): Prisma__ClientClient<$Types.GetResult<ClientPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Token model
   */ 
  interface TokenFieldRefs {
    readonly accessToken: FieldRef<"Token", 'String'>
    readonly accessTokenExpires: FieldRef<"Token", 'DateTime'>
    readonly refreshToken: FieldRef<"Token", 'String'>
    readonly refreshTokenExpires: FieldRef<"Token", 'DateTime'>
    readonly clientName: FieldRef<"Token", 'String'>
    readonly username: FieldRef<"Token", 'String'>
    readonly scope: FieldRef<"Token", 'String'>
    readonly revoked: FieldRef<"Token", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Token findUnique
   */
  export type TokenFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where: TokenWhereUniqueInput
  }


  /**
   * Token findUniqueOrThrow
   */
  export type TokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where: TokenWhereUniqueInput
  }


  /**
   * Token findFirst
   */
  export type TokenFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }


  /**
   * Token findFirstOrThrow
   */
  export type TokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }


  /**
   * Token findMany
   */
  export type TokenFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }


  /**
   * Token create
   */
  export type TokenCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * The data needed to create a Token.
     */
    data: XOR<TokenCreateInput, TokenUncheckedCreateInput>
  }


  /**
   * Token createMany
   */
  export type TokenCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tokens.
     */
    data: TokenCreateManyInput | TokenCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Token update
   */
  export type TokenUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * The data needed to update a Token.
     */
    data: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
    /**
     * Choose, which Token to update.
     */
    where: TokenWhereUniqueInput
  }


  /**
   * Token updateMany
   */
  export type TokenUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tokens.
     */
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     */
    where?: TokenWhereInput
  }


  /**
   * Token upsert
   */
  export type TokenUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * The filter to search for the Token to update in case it exists.
     */
    where: TokenWhereUniqueInput
    /**
     * In case the Token found by the `where` argument doesn't exist, create a new Token with this data.
     */
    create: XOR<TokenCreateInput, TokenUncheckedCreateInput>
    /**
     * In case the Token was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
  }


  /**
   * Token delete
   */
  export type TokenDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter which Token to delete.
     */
    where: TokenWhereUniqueInput
  }


  /**
   * Token deleteMany
   */
  export type TokenDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tokens to delete
     */
    where?: TokenWhereInput
  }


  /**
   * Token without action
   */
  export type TokenArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokenInclude<ExtArgs> | null
  }



  /**
   * Model Client
   */


  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientAvgAggregateOutputType = {
    id: number | null
  }

  export type ClientSumAggregateOutputType = {
    id: number | null
  }

  export type ClientMinAggregateOutputType = {
    id: number | null
    name: string | null
    secret: string | null
  }

  export type ClientMaxAggregateOutputType = {
    id: number | null
    name: string | null
    secret: string | null
  }

  export type ClientCountAggregateOutputType = {
    id: number
    name: number
    secret: number
    _all: number
  }


  export type ClientAvgAggregateInputType = {
    id?: true
  }

  export type ClientSumAggregateInputType = {
    id?: true
  }

  export type ClientMinAggregateInputType = {
    id?: true
    name?: true
    secret?: true
  }

  export type ClientMaxAggregateInputType = {
    id?: true
    name?: true
    secret?: true
  }

  export type ClientCountAggregateInputType = {
    id?: true
    name?: true
    secret?: true
    _all?: true
  }

  export type ClientAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Client to aggregate.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type ClientGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithAggregationInput | ClientOrderByWithAggregationInput[]
    by: ClientScalarFieldEnum[] | ClientScalarFieldEnum
    having?: ClientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _avg?: ClientAvgAggregateInputType
    _sum?: ClientSumAggregateInputType
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }


  export type ClientGroupByOutputType = {
    id: number
    name: string
    secret: string
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends ClientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type ClientSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    secret?: boolean
    tokens?: boolean | Client$tokensArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectScalar = {
    id?: boolean
    name?: boolean
    secret?: boolean
  }

  export type ClientInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    tokens?: boolean | Client$tokensArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeArgs<ExtArgs>
  }


  type ClientGetPayload<S extends boolean | null | undefined | ClientArgs> = $Types.GetResult<ClientPayload, S>

  type ClientCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ClientFindManyArgs, 'select' | 'include'> & {
      select?: ClientCountAggregateInputType | true
    }

  export interface ClientDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Client'], meta: { name: 'Client' } }
    /**
     * Find zero or one Client that matches the filter.
     * @param {ClientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClientFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ClientFindUniqueArgs<ExtArgs>>
    ): Prisma__ClientClient<$Types.GetResult<ClientPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Client that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClientFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ClientClient<$Types.GetResult<ClientPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClientFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientFindFirstArgs<ExtArgs>>
    ): Prisma__ClientClient<$Types.GetResult<ClientPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Client that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClientFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ClientClient<$Types.GetResult<ClientPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClientFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ClientPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Client.
     * @param {ClientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
    **/
    create<T extends ClientCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ClientCreateArgs<ExtArgs>>
    ): Prisma__ClientClient<$Types.GetResult<ClientPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Clients.
     *     @param {ClientCreateManyArgs} args - Arguments to create many Clients.
     *     @example
     *     // Create many Clients
     *     const client = await prisma.client.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClientCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Client.
     * @param {ClientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
    **/
    delete<T extends ClientDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ClientDeleteArgs<ExtArgs>>
    ): Prisma__ClientClient<$Types.GetResult<ClientPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Client.
     * @param {ClientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClientUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ClientUpdateArgs<ExtArgs>>
    ): Prisma__ClientClient<$Types.GetResult<ClientPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Clients.
     * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClientDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClientUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ClientUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Client.
     * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
    **/
    upsert<T extends ClientUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ClientUpsertArgs<ExtArgs>>
    ): Prisma__ClientClient<$Types.GetResult<ClientPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientCountArgs>(
      args?: Subset<T, ClientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): Prisma.PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientGroupByArgs['orderBy'] }
        : { orderBy?: ClientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Client model
   */
  readonly fields: ClientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClientClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tokens<T extends Client$tokensArgs<ExtArgs> = {}>(args?: Subset<T, Client$tokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<TokenPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Client model
   */ 
  interface ClientFieldRefs {
    readonly id: FieldRef<"Client", 'Int'>
    readonly name: FieldRef<"Client", 'String'>
    readonly secret: FieldRef<"Client", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Client findUnique
   */
  export type ClientFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }


  /**
   * Client findUniqueOrThrow
   */
  export type ClientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }


  /**
   * Client findFirst
   */
  export type ClientFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }


  /**
   * Client findFirstOrThrow
   */
  export type ClientFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }


  /**
   * Client findMany
   */
  export type ClientFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }


  /**
   * Client create
   */
  export type ClientCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to create a Client.
     */
    data: XOR<ClientCreateInput, ClientUncheckedCreateInput>
  }


  /**
   * Client createMany
   */
  export type ClientCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Client update
   */
  export type ClientUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to update a Client.
     */
    data: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
    /**
     * Choose, which Client to update.
     */
    where: ClientWhereUniqueInput
  }


  /**
   * Client updateMany
   */
  export type ClientUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
  }


  /**
   * Client upsert
   */
  export type ClientUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The filter to search for the Client to update in case it exists.
     */
    where: ClientWhereUniqueInput
    /**
     * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
     */
    create: XOR<ClientCreateInput, ClientUncheckedCreateInput>
    /**
     * In case the Client was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
  }


  /**
   * Client delete
   */
  export type ClientDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter which Client to delete.
     */
    where: ClientWhereUniqueInput
  }


  /**
   * Client deleteMany
   */
  export type ClientDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clients to delete
     */
    where?: ClientWhereInput
  }


  /**
   * Client.tokens
   */
  export type Client$tokensArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokenInclude<ExtArgs> | null
    where?: TokenWhereInput
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    cursor?: TokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }


  /**
   * Client without action
   */
  export type ClientArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    name: 'name',
    secondname: 'secondname',
    password: 'password',
    gener: 'gener',
    type: 'type',
    theme: 'theme',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    idUserCreated: 'idUserCreated',
    idUserUpdated: 'idUserUpdated'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TranslateScalarFieldEnum: {
    id: 'id',
    keyword: 'keyword',
    ptbr: 'ptbr',
    enus: 'enus',
    esch: 'esch',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    idUserCreated: 'idUserCreated',
    idUserUpdated: 'idUserUpdated'
  };

  export type TranslateScalarFieldEnum = (typeof TranslateScalarFieldEnum)[keyof typeof TranslateScalarFieldEnum]


  export const TokenScalarFieldEnum: {
    accessToken: 'accessToken',
    accessTokenExpires: 'accessTokenExpires',
    refreshToken: 'refreshToken',
    refreshTokenExpires: 'refreshTokenExpires',
    clientName: 'clientName',
    username: 'username',
    scope: 'scope',
    revoked: 'revoked'
  };

  export type TokenScalarFieldEnum = (typeof TokenScalarFieldEnum)[keyof typeof TokenScalarFieldEnum]


  export const ClientScalarFieldEnum: {
    id: 'id',
    name: 'name',
    secret: 'secret'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Avatar'
   */
  export type EnumAvatarFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Avatar'>
    


  /**
   * Reference to a field of type 'UserType'
   */
  export type EnumUserTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserType'>
    


  /**
   * Reference to a field of type 'ThemePage'
   */
  export type EnumThemePageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ThemePage'>
    


  /**
   * Reference to a field of type 'UserStatus'
   */
  export type EnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    secondname?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    gener?: EnumAvatarFilter<"User"> | Avatar
    type?: EnumUserTypeFilter<"User"> | UserType
    theme?: EnumThemePageFilter<"User"> | ThemePage
    status?: EnumUserStatusFilter<"User"> | UserStatus
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    idUserCreated?: IntFilter<"User"> | number
    idUserUpdated?: IntFilter<"User"> | number
    Token?: TokenListRelationFilter
    createdTranslates?: TranslateListRelationFilter
    updatedTranslates?: TranslateListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    secondname?: SortOrder
    password?: SortOrder
    gener?: SortOrder
    type?: SortOrder
    theme?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    idUserCreated?: SortOrder
    idUserUpdated?: SortOrder
    Token?: TokenOrderByRelationAggregateInput
    createdTranslates?: TranslateOrderByRelationAggregateInput
    updatedTranslates?: TranslateOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    secondname?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    gener?: EnumAvatarFilter<"User"> | Avatar
    type?: EnumUserTypeFilter<"User"> | UserType
    theme?: EnumThemePageFilter<"User"> | ThemePage
    status?: EnumUserStatusFilter<"User"> | UserStatus
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    idUserCreated?: IntFilter<"User"> | number
    idUserUpdated?: IntFilter<"User"> | number
    Token?: TokenListRelationFilter
    createdTranslates?: TranslateListRelationFilter
    updatedTranslates?: TranslateListRelationFilter
  }, "id" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    secondname?: SortOrder
    password?: SortOrder
    gener?: SortOrder
    type?: SortOrder
    theme?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    idUserCreated?: SortOrder
    idUserUpdated?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    secondname?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    gener?: EnumAvatarWithAggregatesFilter<"User"> | Avatar
    type?: EnumUserTypeWithAggregatesFilter<"User"> | UserType
    theme?: EnumThemePageWithAggregatesFilter<"User"> | ThemePage
    status?: EnumUserStatusWithAggregatesFilter<"User"> | UserStatus
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    idUserCreated?: IntWithAggregatesFilter<"User"> | number
    idUserUpdated?: IntWithAggregatesFilter<"User"> | number
  }

  export type TranslateWhereInput = {
    AND?: TranslateWhereInput | TranslateWhereInput[]
    OR?: TranslateWhereInput[]
    NOT?: TranslateWhereInput | TranslateWhereInput[]
    id?: IntFilter<"Translate"> | number
    keyword?: StringFilter<"Translate"> | string
    ptbr?: StringFilter<"Translate"> | string
    enus?: StringFilter<"Translate"> | string
    esch?: StringFilter<"Translate"> | string
    createdAt?: DateTimeFilter<"Translate"> | Date | string
    updatedAt?: DateTimeFilter<"Translate"> | Date | string
    idUserCreated?: IntFilter<"Translate"> | number
    idUserUpdated?: IntFilter<"Translate"> | number
    userCreated?: XOR<UserRelationFilter, UserWhereInput>
    userUpdated?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TranslateOrderByWithRelationInput = {
    id?: SortOrder
    keyword?: SortOrder
    ptbr?: SortOrder
    enus?: SortOrder
    esch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    idUserCreated?: SortOrder
    idUserUpdated?: SortOrder
    userCreated?: UserOrderByWithRelationInput
    userUpdated?: UserOrderByWithRelationInput
  }

  export type TranslateWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    keyword?: string
    AND?: TranslateWhereInput | TranslateWhereInput[]
    OR?: TranslateWhereInput[]
    NOT?: TranslateWhereInput | TranslateWhereInput[]
    ptbr?: StringFilter<"Translate"> | string
    enus?: StringFilter<"Translate"> | string
    esch?: StringFilter<"Translate"> | string
    createdAt?: DateTimeFilter<"Translate"> | Date | string
    updatedAt?: DateTimeFilter<"Translate"> | Date | string
    idUserCreated?: IntFilter<"Translate"> | number
    idUserUpdated?: IntFilter<"Translate"> | number
    userCreated?: XOR<UserRelationFilter, UserWhereInput>
    userUpdated?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "keyword">

  export type TranslateOrderByWithAggregationInput = {
    id?: SortOrder
    keyword?: SortOrder
    ptbr?: SortOrder
    enus?: SortOrder
    esch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    idUserCreated?: SortOrder
    idUserUpdated?: SortOrder
    _count?: TranslateCountOrderByAggregateInput
    _avg?: TranslateAvgOrderByAggregateInput
    _max?: TranslateMaxOrderByAggregateInput
    _min?: TranslateMinOrderByAggregateInput
    _sum?: TranslateSumOrderByAggregateInput
  }

  export type TranslateScalarWhereWithAggregatesInput = {
    AND?: TranslateScalarWhereWithAggregatesInput | TranslateScalarWhereWithAggregatesInput[]
    OR?: TranslateScalarWhereWithAggregatesInput[]
    NOT?: TranslateScalarWhereWithAggregatesInput | TranslateScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Translate"> | number
    keyword?: StringWithAggregatesFilter<"Translate"> | string
    ptbr?: StringWithAggregatesFilter<"Translate"> | string
    enus?: StringWithAggregatesFilter<"Translate"> | string
    esch?: StringWithAggregatesFilter<"Translate"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Translate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Translate"> | Date | string
    idUserCreated?: IntWithAggregatesFilter<"Translate"> | number
    idUserUpdated?: IntWithAggregatesFilter<"Translate"> | number
  }

  export type TokenWhereInput = {
    AND?: TokenWhereInput | TokenWhereInput[]
    OR?: TokenWhereInput[]
    NOT?: TokenWhereInput | TokenWhereInput[]
    accessToken?: StringFilter<"Token"> | string
    accessTokenExpires?: DateTimeFilter<"Token"> | Date | string
    refreshToken?: StringFilter<"Token"> | string
    refreshTokenExpires?: DateTimeFilter<"Token"> | Date | string
    clientName?: StringFilter<"Token"> | string
    username?: StringFilter<"Token"> | string
    scope?: StringFilter<"Token"> | string
    revoked?: BoolFilter<"Token"> | boolean
    client?: XOR<ClientRelationFilter, ClientWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TokenOrderByWithRelationInput = {
    accessToken?: SortOrder
    accessTokenExpires?: SortOrder
    refreshToken?: SortOrder
    refreshTokenExpires?: SortOrder
    clientName?: SortOrder
    username?: SortOrder
    scope?: SortOrder
    revoked?: SortOrder
    client?: ClientOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type TokenWhereUniqueInput = Prisma.AtLeast<{
    accessToken?: string
    refreshToken?: string
    AND?: TokenWhereInput | TokenWhereInput[]
    OR?: TokenWhereInput[]
    NOT?: TokenWhereInput | TokenWhereInput[]
    accessTokenExpires?: DateTimeFilter<"Token"> | Date | string
    refreshTokenExpires?: DateTimeFilter<"Token"> | Date | string
    clientName?: StringFilter<"Token"> | string
    username?: StringFilter<"Token"> | string
    scope?: StringFilter<"Token"> | string
    revoked?: BoolFilter<"Token"> | boolean
    client?: XOR<ClientRelationFilter, ClientWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "accessToken" | "refreshToken">

  export type TokenOrderByWithAggregationInput = {
    accessToken?: SortOrder
    accessTokenExpires?: SortOrder
    refreshToken?: SortOrder
    refreshTokenExpires?: SortOrder
    clientName?: SortOrder
    username?: SortOrder
    scope?: SortOrder
    revoked?: SortOrder
    _count?: TokenCountOrderByAggregateInput
    _max?: TokenMaxOrderByAggregateInput
    _min?: TokenMinOrderByAggregateInput
  }

  export type TokenScalarWhereWithAggregatesInput = {
    AND?: TokenScalarWhereWithAggregatesInput | TokenScalarWhereWithAggregatesInput[]
    OR?: TokenScalarWhereWithAggregatesInput[]
    NOT?: TokenScalarWhereWithAggregatesInput | TokenScalarWhereWithAggregatesInput[]
    accessToken?: StringWithAggregatesFilter<"Token"> | string
    accessTokenExpires?: DateTimeWithAggregatesFilter<"Token"> | Date | string
    refreshToken?: StringWithAggregatesFilter<"Token"> | string
    refreshTokenExpires?: DateTimeWithAggregatesFilter<"Token"> | Date | string
    clientName?: StringWithAggregatesFilter<"Token"> | string
    username?: StringWithAggregatesFilter<"Token"> | string
    scope?: StringWithAggregatesFilter<"Token"> | string
    revoked?: BoolWithAggregatesFilter<"Token"> | boolean
  }

  export type ClientWhereInput = {
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    id?: IntFilter<"Client"> | number
    name?: StringFilter<"Client"> | string
    secret?: StringFilter<"Client"> | string
    tokens?: TokenListRelationFilter
  }

  export type ClientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    secret?: SortOrder
    tokens?: TokenOrderByRelationAggregateInput
  }

  export type ClientWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    secret?: StringFilter<"Client"> | string
    tokens?: TokenListRelationFilter
  }, "id" | "name">

  export type ClientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    secret?: SortOrder
    _count?: ClientCountOrderByAggregateInput
    _avg?: ClientAvgOrderByAggregateInput
    _max?: ClientMaxOrderByAggregateInput
    _min?: ClientMinOrderByAggregateInput
    _sum?: ClientSumOrderByAggregateInput
  }

  export type ClientScalarWhereWithAggregatesInput = {
    AND?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    OR?: ClientScalarWhereWithAggregatesInput[]
    NOT?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Client"> | number
    name?: StringWithAggregatesFilter<"Client"> | string
    secret?: StringWithAggregatesFilter<"Client"> | string
  }

  export type UserCreateInput = {
    username: string
    name: string
    secondname: string
    password: string
    gener: Avatar
    type: UserType
    theme?: ThemePage
    status: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    idUserCreated: number
    idUserUpdated: number
    Token?: TokenCreateNestedManyWithoutUserInput
    createdTranslates?: TranslateCreateNestedManyWithoutUserCreatedInput
    updatedTranslates?: TranslateCreateNestedManyWithoutUserUpdatedInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    name: string
    secondname: string
    password: string
    gener: Avatar
    type: UserType
    theme?: ThemePage
    status: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    idUserCreated: number
    idUserUpdated: number
    Token?: TokenUncheckedCreateNestedManyWithoutUserInput
    createdTranslates?: TranslateUncheckedCreateNestedManyWithoutUserCreatedInput
    updatedTranslates?: TranslateUncheckedCreateNestedManyWithoutUserUpdatedInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    secondname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gener?: EnumAvatarFieldUpdateOperationsInput | Avatar
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    theme?: EnumThemePageFieldUpdateOperationsInput | ThemePage
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idUserCreated?: IntFieldUpdateOperationsInput | number
    idUserUpdated?: IntFieldUpdateOperationsInput | number
    Token?: TokenUpdateManyWithoutUserNestedInput
    createdTranslates?: TranslateUpdateManyWithoutUserCreatedNestedInput
    updatedTranslates?: TranslateUpdateManyWithoutUserUpdatedNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    secondname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gener?: EnumAvatarFieldUpdateOperationsInput | Avatar
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    theme?: EnumThemePageFieldUpdateOperationsInput | ThemePage
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idUserCreated?: IntFieldUpdateOperationsInput | number
    idUserUpdated?: IntFieldUpdateOperationsInput | number
    Token?: TokenUncheckedUpdateManyWithoutUserNestedInput
    createdTranslates?: TranslateUncheckedUpdateManyWithoutUserCreatedNestedInput
    updatedTranslates?: TranslateUncheckedUpdateManyWithoutUserUpdatedNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    name: string
    secondname: string
    password: string
    gener: Avatar
    type: UserType
    theme?: ThemePage
    status: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    idUserCreated: number
    idUserUpdated: number
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    secondname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gener?: EnumAvatarFieldUpdateOperationsInput | Avatar
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    theme?: EnumThemePageFieldUpdateOperationsInput | ThemePage
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idUserCreated?: IntFieldUpdateOperationsInput | number
    idUserUpdated?: IntFieldUpdateOperationsInput | number
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    secondname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gener?: EnumAvatarFieldUpdateOperationsInput | Avatar
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    theme?: EnumThemePageFieldUpdateOperationsInput | ThemePage
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idUserCreated?: IntFieldUpdateOperationsInput | number
    idUserUpdated?: IntFieldUpdateOperationsInput | number
  }

  export type TranslateCreateInput = {
    keyword: string
    ptbr: string
    enus: string
    esch: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userCreated: UserCreateNestedOneWithoutCreatedTranslatesInput
    userUpdated: UserCreateNestedOneWithoutUpdatedTranslatesInput
  }

  export type TranslateUncheckedCreateInput = {
    id?: number
    keyword: string
    ptbr: string
    enus: string
    esch: string
    createdAt?: Date | string
    updatedAt?: Date | string
    idUserCreated: number
    idUserUpdated: number
  }

  export type TranslateUpdateInput = {
    keyword?: StringFieldUpdateOperationsInput | string
    ptbr?: StringFieldUpdateOperationsInput | string
    enus?: StringFieldUpdateOperationsInput | string
    esch?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userCreated?: UserUpdateOneRequiredWithoutCreatedTranslatesNestedInput
    userUpdated?: UserUpdateOneRequiredWithoutUpdatedTranslatesNestedInput
  }

  export type TranslateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    keyword?: StringFieldUpdateOperationsInput | string
    ptbr?: StringFieldUpdateOperationsInput | string
    enus?: StringFieldUpdateOperationsInput | string
    esch?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idUserCreated?: IntFieldUpdateOperationsInput | number
    idUserUpdated?: IntFieldUpdateOperationsInput | number
  }

  export type TranslateCreateManyInput = {
    id?: number
    keyword: string
    ptbr: string
    enus: string
    esch: string
    createdAt?: Date | string
    updatedAt?: Date | string
    idUserCreated: number
    idUserUpdated: number
  }

  export type TranslateUpdateManyMutationInput = {
    keyword?: StringFieldUpdateOperationsInput | string
    ptbr?: StringFieldUpdateOperationsInput | string
    enus?: StringFieldUpdateOperationsInput | string
    esch?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TranslateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    keyword?: StringFieldUpdateOperationsInput | string
    ptbr?: StringFieldUpdateOperationsInput | string
    enus?: StringFieldUpdateOperationsInput | string
    esch?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idUserCreated?: IntFieldUpdateOperationsInput | number
    idUserUpdated?: IntFieldUpdateOperationsInput | number
  }

  export type TokenCreateInput = {
    accessToken: string
    accessTokenExpires: Date | string
    refreshToken: string
    refreshTokenExpires: Date | string
    scope: string
    revoked?: boolean
    client: ClientCreateNestedOneWithoutTokensInput
    user: UserCreateNestedOneWithoutTokenInput
  }

  export type TokenUncheckedCreateInput = {
    accessToken: string
    accessTokenExpires: Date | string
    refreshToken: string
    refreshTokenExpires: Date | string
    clientName: string
    username: string
    scope: string
    revoked?: boolean
  }

  export type TokenUpdateInput = {
    accessToken?: StringFieldUpdateOperationsInput | string
    accessTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    refreshTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    scope?: StringFieldUpdateOperationsInput | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    client?: ClientUpdateOneRequiredWithoutTokensNestedInput
    user?: UserUpdateOneRequiredWithoutTokenNestedInput
  }

  export type TokenUncheckedUpdateInput = {
    accessToken?: StringFieldUpdateOperationsInput | string
    accessTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    refreshTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    clientName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TokenCreateManyInput = {
    accessToken: string
    accessTokenExpires: Date | string
    refreshToken: string
    refreshTokenExpires: Date | string
    clientName: string
    username: string
    scope: string
    revoked?: boolean
  }

  export type TokenUpdateManyMutationInput = {
    accessToken?: StringFieldUpdateOperationsInput | string
    accessTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    refreshTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    scope?: StringFieldUpdateOperationsInput | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TokenUncheckedUpdateManyInput = {
    accessToken?: StringFieldUpdateOperationsInput | string
    accessTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    refreshTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    clientName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClientCreateInput = {
    name: string
    secret: string
    tokens?: TokenCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateInput = {
    id?: number
    name: string
    secret: string
    tokens?: TokenUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    tokens?: TokenUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    tokens?: TokenUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientCreateManyInput = {
    id?: number
    name: string
    secret: string
  }

  export type ClientUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
  }

  export type ClientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumAvatarFilter<$PrismaModel = never> = {
    equals?: Avatar | EnumAvatarFieldRefInput<$PrismaModel>
    in?: Avatar[]
    notIn?: Avatar[]
    not?: NestedEnumAvatarFilter<$PrismaModel> | Avatar
  }

  export type EnumUserTypeFilter<$PrismaModel = never> = {
    equals?: UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: UserType[]
    notIn?: UserType[]
    not?: NestedEnumUserTypeFilter<$PrismaModel> | UserType
  }

  export type EnumThemePageFilter<$PrismaModel = never> = {
    equals?: ThemePage | EnumThemePageFieldRefInput<$PrismaModel>
    in?: ThemePage[]
    notIn?: ThemePage[]
    not?: NestedEnumThemePageFilter<$PrismaModel> | ThemePage
  }

  export type EnumUserStatusFilter<$PrismaModel = never> = {
    equals?: UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: UserStatus[]
    notIn?: UserStatus[]
    not?: NestedEnumUserStatusFilter<$PrismaModel> | UserStatus
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TokenListRelationFilter = {
    every?: TokenWhereInput
    some?: TokenWhereInput
    none?: TokenWhereInput
  }

  export type TranslateListRelationFilter = {
    every?: TranslateWhereInput
    some?: TranslateWhereInput
    none?: TranslateWhereInput
  }

  export type TokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TranslateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    secondname?: SortOrder
    password?: SortOrder
    gener?: SortOrder
    type?: SortOrder
    theme?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    idUserCreated?: SortOrder
    idUserUpdated?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    idUserCreated?: SortOrder
    idUserUpdated?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    secondname?: SortOrder
    password?: SortOrder
    gener?: SortOrder
    type?: SortOrder
    theme?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    idUserCreated?: SortOrder
    idUserUpdated?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    secondname?: SortOrder
    password?: SortOrder
    gener?: SortOrder
    type?: SortOrder
    theme?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    idUserCreated?: SortOrder
    idUserUpdated?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    idUserCreated?: SortOrder
    idUserUpdated?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumAvatarWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Avatar | EnumAvatarFieldRefInput<$PrismaModel>
    in?: Avatar[]
    notIn?: Avatar[]
    not?: NestedEnumAvatarWithAggregatesFilter<$PrismaModel> | Avatar
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAvatarFilter<$PrismaModel>
    _max?: NestedEnumAvatarFilter<$PrismaModel>
  }

  export type EnumUserTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: UserType[]
    notIn?: UserType[]
    not?: NestedEnumUserTypeWithAggregatesFilter<$PrismaModel> | UserType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserTypeFilter<$PrismaModel>
    _max?: NestedEnumUserTypeFilter<$PrismaModel>
  }

  export type EnumThemePageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: ThemePage | EnumThemePageFieldRefInput<$PrismaModel>
    in?: ThemePage[]
    notIn?: ThemePage[]
    not?: NestedEnumThemePageWithAggregatesFilter<$PrismaModel> | ThemePage
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumThemePageFilter<$PrismaModel>
    _max?: NestedEnumThemePageFilter<$PrismaModel>
  }

  export type EnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: UserStatus[]
    notIn?: UserStatus[]
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TranslateCountOrderByAggregateInput = {
    id?: SortOrder
    keyword?: SortOrder
    ptbr?: SortOrder
    enus?: SortOrder
    esch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    idUserCreated?: SortOrder
    idUserUpdated?: SortOrder
  }

  export type TranslateAvgOrderByAggregateInput = {
    id?: SortOrder
    idUserCreated?: SortOrder
    idUserUpdated?: SortOrder
  }

  export type TranslateMaxOrderByAggregateInput = {
    id?: SortOrder
    keyword?: SortOrder
    ptbr?: SortOrder
    enus?: SortOrder
    esch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    idUserCreated?: SortOrder
    idUserUpdated?: SortOrder
  }

  export type TranslateMinOrderByAggregateInput = {
    id?: SortOrder
    keyword?: SortOrder
    ptbr?: SortOrder
    enus?: SortOrder
    esch?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    idUserCreated?: SortOrder
    idUserUpdated?: SortOrder
  }

  export type TranslateSumOrderByAggregateInput = {
    id?: SortOrder
    idUserCreated?: SortOrder
    idUserUpdated?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ClientRelationFilter = {
    is?: ClientWhereInput
    isNot?: ClientWhereInput
  }

  export type TokenCountOrderByAggregateInput = {
    accessToken?: SortOrder
    accessTokenExpires?: SortOrder
    refreshToken?: SortOrder
    refreshTokenExpires?: SortOrder
    clientName?: SortOrder
    username?: SortOrder
    scope?: SortOrder
    revoked?: SortOrder
  }

  export type TokenMaxOrderByAggregateInput = {
    accessToken?: SortOrder
    accessTokenExpires?: SortOrder
    refreshToken?: SortOrder
    refreshTokenExpires?: SortOrder
    clientName?: SortOrder
    username?: SortOrder
    scope?: SortOrder
    revoked?: SortOrder
  }

  export type TokenMinOrderByAggregateInput = {
    accessToken?: SortOrder
    accessTokenExpires?: SortOrder
    refreshToken?: SortOrder
    refreshTokenExpires?: SortOrder
    clientName?: SortOrder
    username?: SortOrder
    scope?: SortOrder
    revoked?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ClientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    secret?: SortOrder
  }

  export type ClientAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    secret?: SortOrder
  }

  export type ClientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    secret?: SortOrder
  }

  export type ClientSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TokenCreateNestedManyWithoutUserInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput> | TokenCreateWithoutUserInput[] | TokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput | TokenCreateOrConnectWithoutUserInput[]
    createMany?: TokenCreateManyUserInputEnvelope
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
  }

  export type TranslateCreateNestedManyWithoutUserCreatedInput = {
    create?: XOR<TranslateCreateWithoutUserCreatedInput, TranslateUncheckedCreateWithoutUserCreatedInput> | TranslateCreateWithoutUserCreatedInput[] | TranslateUncheckedCreateWithoutUserCreatedInput[]
    connectOrCreate?: TranslateCreateOrConnectWithoutUserCreatedInput | TranslateCreateOrConnectWithoutUserCreatedInput[]
    createMany?: TranslateCreateManyUserCreatedInputEnvelope
    connect?: TranslateWhereUniqueInput | TranslateWhereUniqueInput[]
  }

  export type TranslateCreateNestedManyWithoutUserUpdatedInput = {
    create?: XOR<TranslateCreateWithoutUserUpdatedInput, TranslateUncheckedCreateWithoutUserUpdatedInput> | TranslateCreateWithoutUserUpdatedInput[] | TranslateUncheckedCreateWithoutUserUpdatedInput[]
    connectOrCreate?: TranslateCreateOrConnectWithoutUserUpdatedInput | TranslateCreateOrConnectWithoutUserUpdatedInput[]
    createMany?: TranslateCreateManyUserUpdatedInputEnvelope
    connect?: TranslateWhereUniqueInput | TranslateWhereUniqueInput[]
  }

  export type TokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput> | TokenCreateWithoutUserInput[] | TokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput | TokenCreateOrConnectWithoutUserInput[]
    createMany?: TokenCreateManyUserInputEnvelope
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
  }

  export type TranslateUncheckedCreateNestedManyWithoutUserCreatedInput = {
    create?: XOR<TranslateCreateWithoutUserCreatedInput, TranslateUncheckedCreateWithoutUserCreatedInput> | TranslateCreateWithoutUserCreatedInput[] | TranslateUncheckedCreateWithoutUserCreatedInput[]
    connectOrCreate?: TranslateCreateOrConnectWithoutUserCreatedInput | TranslateCreateOrConnectWithoutUserCreatedInput[]
    createMany?: TranslateCreateManyUserCreatedInputEnvelope
    connect?: TranslateWhereUniqueInput | TranslateWhereUniqueInput[]
  }

  export type TranslateUncheckedCreateNestedManyWithoutUserUpdatedInput = {
    create?: XOR<TranslateCreateWithoutUserUpdatedInput, TranslateUncheckedCreateWithoutUserUpdatedInput> | TranslateCreateWithoutUserUpdatedInput[] | TranslateUncheckedCreateWithoutUserUpdatedInput[]
    connectOrCreate?: TranslateCreateOrConnectWithoutUserUpdatedInput | TranslateCreateOrConnectWithoutUserUpdatedInput[]
    createMany?: TranslateCreateManyUserUpdatedInputEnvelope
    connect?: TranslateWhereUniqueInput | TranslateWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumAvatarFieldUpdateOperationsInput = {
    set?: Avatar
  }

  export type EnumUserTypeFieldUpdateOperationsInput = {
    set?: UserType
  }

  export type EnumThemePageFieldUpdateOperationsInput = {
    set?: ThemePage
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: UserStatus
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput> | TokenCreateWithoutUserInput[] | TokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput | TokenCreateOrConnectWithoutUserInput[]
    upsert?: TokenUpsertWithWhereUniqueWithoutUserInput | TokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TokenCreateManyUserInputEnvelope
    set?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    disconnect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    delete?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    update?: TokenUpdateWithWhereUniqueWithoutUserInput | TokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TokenUpdateManyWithWhereWithoutUserInput | TokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TokenScalarWhereInput | TokenScalarWhereInput[]
  }

  export type TranslateUpdateManyWithoutUserCreatedNestedInput = {
    create?: XOR<TranslateCreateWithoutUserCreatedInput, TranslateUncheckedCreateWithoutUserCreatedInput> | TranslateCreateWithoutUserCreatedInput[] | TranslateUncheckedCreateWithoutUserCreatedInput[]
    connectOrCreate?: TranslateCreateOrConnectWithoutUserCreatedInput | TranslateCreateOrConnectWithoutUserCreatedInput[]
    upsert?: TranslateUpsertWithWhereUniqueWithoutUserCreatedInput | TranslateUpsertWithWhereUniqueWithoutUserCreatedInput[]
    createMany?: TranslateCreateManyUserCreatedInputEnvelope
    set?: TranslateWhereUniqueInput | TranslateWhereUniqueInput[]
    disconnect?: TranslateWhereUniqueInput | TranslateWhereUniqueInput[]
    delete?: TranslateWhereUniqueInput | TranslateWhereUniqueInput[]
    connect?: TranslateWhereUniqueInput | TranslateWhereUniqueInput[]
    update?: TranslateUpdateWithWhereUniqueWithoutUserCreatedInput | TranslateUpdateWithWhereUniqueWithoutUserCreatedInput[]
    updateMany?: TranslateUpdateManyWithWhereWithoutUserCreatedInput | TranslateUpdateManyWithWhereWithoutUserCreatedInput[]
    deleteMany?: TranslateScalarWhereInput | TranslateScalarWhereInput[]
  }

  export type TranslateUpdateManyWithoutUserUpdatedNestedInput = {
    create?: XOR<TranslateCreateWithoutUserUpdatedInput, TranslateUncheckedCreateWithoutUserUpdatedInput> | TranslateCreateWithoutUserUpdatedInput[] | TranslateUncheckedCreateWithoutUserUpdatedInput[]
    connectOrCreate?: TranslateCreateOrConnectWithoutUserUpdatedInput | TranslateCreateOrConnectWithoutUserUpdatedInput[]
    upsert?: TranslateUpsertWithWhereUniqueWithoutUserUpdatedInput | TranslateUpsertWithWhereUniqueWithoutUserUpdatedInput[]
    createMany?: TranslateCreateManyUserUpdatedInputEnvelope
    set?: TranslateWhereUniqueInput | TranslateWhereUniqueInput[]
    disconnect?: TranslateWhereUniqueInput | TranslateWhereUniqueInput[]
    delete?: TranslateWhereUniqueInput | TranslateWhereUniqueInput[]
    connect?: TranslateWhereUniqueInput | TranslateWhereUniqueInput[]
    update?: TranslateUpdateWithWhereUniqueWithoutUserUpdatedInput | TranslateUpdateWithWhereUniqueWithoutUserUpdatedInput[]
    updateMany?: TranslateUpdateManyWithWhereWithoutUserUpdatedInput | TranslateUpdateManyWithWhereWithoutUserUpdatedInput[]
    deleteMany?: TranslateScalarWhereInput | TranslateScalarWhereInput[]
  }

  export type TokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput> | TokenCreateWithoutUserInput[] | TokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput | TokenCreateOrConnectWithoutUserInput[]
    upsert?: TokenUpsertWithWhereUniqueWithoutUserInput | TokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TokenCreateManyUserInputEnvelope
    set?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    disconnect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    delete?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    update?: TokenUpdateWithWhereUniqueWithoutUserInput | TokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TokenUpdateManyWithWhereWithoutUserInput | TokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TokenScalarWhereInput | TokenScalarWhereInput[]
  }

  export type TranslateUncheckedUpdateManyWithoutUserCreatedNestedInput = {
    create?: XOR<TranslateCreateWithoutUserCreatedInput, TranslateUncheckedCreateWithoutUserCreatedInput> | TranslateCreateWithoutUserCreatedInput[] | TranslateUncheckedCreateWithoutUserCreatedInput[]
    connectOrCreate?: TranslateCreateOrConnectWithoutUserCreatedInput | TranslateCreateOrConnectWithoutUserCreatedInput[]
    upsert?: TranslateUpsertWithWhereUniqueWithoutUserCreatedInput | TranslateUpsertWithWhereUniqueWithoutUserCreatedInput[]
    createMany?: TranslateCreateManyUserCreatedInputEnvelope
    set?: TranslateWhereUniqueInput | TranslateWhereUniqueInput[]
    disconnect?: TranslateWhereUniqueInput | TranslateWhereUniqueInput[]
    delete?: TranslateWhereUniqueInput | TranslateWhereUniqueInput[]
    connect?: TranslateWhereUniqueInput | TranslateWhereUniqueInput[]
    update?: TranslateUpdateWithWhereUniqueWithoutUserCreatedInput | TranslateUpdateWithWhereUniqueWithoutUserCreatedInput[]
    updateMany?: TranslateUpdateManyWithWhereWithoutUserCreatedInput | TranslateUpdateManyWithWhereWithoutUserCreatedInput[]
    deleteMany?: TranslateScalarWhereInput | TranslateScalarWhereInput[]
  }

  export type TranslateUncheckedUpdateManyWithoutUserUpdatedNestedInput = {
    create?: XOR<TranslateCreateWithoutUserUpdatedInput, TranslateUncheckedCreateWithoutUserUpdatedInput> | TranslateCreateWithoutUserUpdatedInput[] | TranslateUncheckedCreateWithoutUserUpdatedInput[]
    connectOrCreate?: TranslateCreateOrConnectWithoutUserUpdatedInput | TranslateCreateOrConnectWithoutUserUpdatedInput[]
    upsert?: TranslateUpsertWithWhereUniqueWithoutUserUpdatedInput | TranslateUpsertWithWhereUniqueWithoutUserUpdatedInput[]
    createMany?: TranslateCreateManyUserUpdatedInputEnvelope
    set?: TranslateWhereUniqueInput | TranslateWhereUniqueInput[]
    disconnect?: TranslateWhereUniqueInput | TranslateWhereUniqueInput[]
    delete?: TranslateWhereUniqueInput | TranslateWhereUniqueInput[]
    connect?: TranslateWhereUniqueInput | TranslateWhereUniqueInput[]
    update?: TranslateUpdateWithWhereUniqueWithoutUserUpdatedInput | TranslateUpdateWithWhereUniqueWithoutUserUpdatedInput[]
    updateMany?: TranslateUpdateManyWithWhereWithoutUserUpdatedInput | TranslateUpdateManyWithWhereWithoutUserUpdatedInput[]
    deleteMany?: TranslateScalarWhereInput | TranslateScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedTranslatesInput = {
    create?: XOR<UserCreateWithoutCreatedTranslatesInput, UserUncheckedCreateWithoutCreatedTranslatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTranslatesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedTranslatesInput = {
    create?: XOR<UserCreateWithoutUpdatedTranslatesInput, UserUncheckedCreateWithoutUpdatedTranslatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedTranslatesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCreatedTranslatesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedTranslatesInput, UserUncheckedCreateWithoutCreatedTranslatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTranslatesInput
    upsert?: UserUpsertWithoutCreatedTranslatesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedTranslatesInput, UserUpdateWithoutCreatedTranslatesInput>, UserUncheckedUpdateWithoutCreatedTranslatesInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedTranslatesNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedTranslatesInput, UserUncheckedCreateWithoutUpdatedTranslatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedTranslatesInput
    upsert?: UserUpsertWithoutUpdatedTranslatesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedTranslatesInput, UserUpdateWithoutUpdatedTranslatesInput>, UserUncheckedUpdateWithoutUpdatedTranslatesInput>
  }

  export type ClientCreateNestedOneWithoutTokensInput = {
    create?: XOR<ClientCreateWithoutTokensInput, ClientUncheckedCreateWithoutTokensInput>
    connectOrCreate?: ClientCreateOrConnectWithoutTokensInput
    connect?: ClientWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTokenInput = {
    create?: XOR<UserCreateWithoutTokenInput, UserUncheckedCreateWithoutTokenInput>
    connectOrCreate?: UserCreateOrConnectWithoutTokenInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ClientUpdateOneRequiredWithoutTokensNestedInput = {
    create?: XOR<ClientCreateWithoutTokensInput, ClientUncheckedCreateWithoutTokensInput>
    connectOrCreate?: ClientCreateOrConnectWithoutTokensInput
    upsert?: ClientUpsertWithoutTokensInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutTokensInput, ClientUpdateWithoutTokensInput>, ClientUncheckedUpdateWithoutTokensInput>
  }

  export type UserUpdateOneRequiredWithoutTokenNestedInput = {
    create?: XOR<UserCreateWithoutTokenInput, UserUncheckedCreateWithoutTokenInput>
    connectOrCreate?: UserCreateOrConnectWithoutTokenInput
    upsert?: UserUpsertWithoutTokenInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTokenInput, UserUpdateWithoutTokenInput>, UserUncheckedUpdateWithoutTokenInput>
  }

  export type TokenCreateNestedManyWithoutClientInput = {
    create?: XOR<TokenCreateWithoutClientInput, TokenUncheckedCreateWithoutClientInput> | TokenCreateWithoutClientInput[] | TokenUncheckedCreateWithoutClientInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutClientInput | TokenCreateOrConnectWithoutClientInput[]
    createMany?: TokenCreateManyClientInputEnvelope
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
  }

  export type TokenUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<TokenCreateWithoutClientInput, TokenUncheckedCreateWithoutClientInput> | TokenCreateWithoutClientInput[] | TokenUncheckedCreateWithoutClientInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutClientInput | TokenCreateOrConnectWithoutClientInput[]
    createMany?: TokenCreateManyClientInputEnvelope
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
  }

  export type TokenUpdateManyWithoutClientNestedInput = {
    create?: XOR<TokenCreateWithoutClientInput, TokenUncheckedCreateWithoutClientInput> | TokenCreateWithoutClientInput[] | TokenUncheckedCreateWithoutClientInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutClientInput | TokenCreateOrConnectWithoutClientInput[]
    upsert?: TokenUpsertWithWhereUniqueWithoutClientInput | TokenUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: TokenCreateManyClientInputEnvelope
    set?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    disconnect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    delete?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    update?: TokenUpdateWithWhereUniqueWithoutClientInput | TokenUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: TokenUpdateManyWithWhereWithoutClientInput | TokenUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: TokenScalarWhereInput | TokenScalarWhereInput[]
  }

  export type TokenUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<TokenCreateWithoutClientInput, TokenUncheckedCreateWithoutClientInput> | TokenCreateWithoutClientInput[] | TokenUncheckedCreateWithoutClientInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutClientInput | TokenCreateOrConnectWithoutClientInput[]
    upsert?: TokenUpsertWithWhereUniqueWithoutClientInput | TokenUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: TokenCreateManyClientInputEnvelope
    set?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    disconnect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    delete?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    update?: TokenUpdateWithWhereUniqueWithoutClientInput | TokenUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: TokenUpdateManyWithWhereWithoutClientInput | TokenUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: TokenScalarWhereInput | TokenScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumAvatarFilter<$PrismaModel = never> = {
    equals?: Avatar | EnumAvatarFieldRefInput<$PrismaModel>
    in?: Avatar[]
    notIn?: Avatar[]
    not?: NestedEnumAvatarFilter<$PrismaModel> | Avatar
  }

  export type NestedEnumUserTypeFilter<$PrismaModel = never> = {
    equals?: UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: UserType[]
    notIn?: UserType[]
    not?: NestedEnumUserTypeFilter<$PrismaModel> | UserType
  }

  export type NestedEnumThemePageFilter<$PrismaModel = never> = {
    equals?: ThemePage | EnumThemePageFieldRefInput<$PrismaModel>
    in?: ThemePage[]
    notIn?: ThemePage[]
    not?: NestedEnumThemePageFilter<$PrismaModel> | ThemePage
  }

  export type NestedEnumUserStatusFilter<$PrismaModel = never> = {
    equals?: UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: UserStatus[]
    notIn?: UserStatus[]
    not?: NestedEnumUserStatusFilter<$PrismaModel> | UserStatus
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumAvatarWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Avatar | EnumAvatarFieldRefInput<$PrismaModel>
    in?: Avatar[]
    notIn?: Avatar[]
    not?: NestedEnumAvatarWithAggregatesFilter<$PrismaModel> | Avatar
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAvatarFilter<$PrismaModel>
    _max?: NestedEnumAvatarFilter<$PrismaModel>
  }

  export type NestedEnumUserTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: UserType[]
    notIn?: UserType[]
    not?: NestedEnumUserTypeWithAggregatesFilter<$PrismaModel> | UserType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserTypeFilter<$PrismaModel>
    _max?: NestedEnumUserTypeFilter<$PrismaModel>
  }

  export type NestedEnumThemePageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: ThemePage | EnumThemePageFieldRefInput<$PrismaModel>
    in?: ThemePage[]
    notIn?: ThemePage[]
    not?: NestedEnumThemePageWithAggregatesFilter<$PrismaModel> | ThemePage
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumThemePageFilter<$PrismaModel>
    _max?: NestedEnumThemePageFilter<$PrismaModel>
  }

  export type NestedEnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: UserStatus[]
    notIn?: UserStatus[]
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type TokenCreateWithoutUserInput = {
    accessToken: string
    accessTokenExpires: Date | string
    refreshToken: string
    refreshTokenExpires: Date | string
    scope: string
    revoked?: boolean
    client: ClientCreateNestedOneWithoutTokensInput
  }

  export type TokenUncheckedCreateWithoutUserInput = {
    accessToken: string
    accessTokenExpires: Date | string
    refreshToken: string
    refreshTokenExpires: Date | string
    clientName: string
    scope: string
    revoked?: boolean
  }

  export type TokenCreateOrConnectWithoutUserInput = {
    where: TokenWhereUniqueInput
    create: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
  }

  export type TokenCreateManyUserInputEnvelope = {
    data: TokenCreateManyUserInput | TokenCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TranslateCreateWithoutUserCreatedInput = {
    keyword: string
    ptbr: string
    enus: string
    esch: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userUpdated: UserCreateNestedOneWithoutUpdatedTranslatesInput
  }

  export type TranslateUncheckedCreateWithoutUserCreatedInput = {
    id?: number
    keyword: string
    ptbr: string
    enus: string
    esch: string
    createdAt?: Date | string
    updatedAt?: Date | string
    idUserUpdated: number
  }

  export type TranslateCreateOrConnectWithoutUserCreatedInput = {
    where: TranslateWhereUniqueInput
    create: XOR<TranslateCreateWithoutUserCreatedInput, TranslateUncheckedCreateWithoutUserCreatedInput>
  }

  export type TranslateCreateManyUserCreatedInputEnvelope = {
    data: TranslateCreateManyUserCreatedInput | TranslateCreateManyUserCreatedInput[]
    skipDuplicates?: boolean
  }

  export type TranslateCreateWithoutUserUpdatedInput = {
    keyword: string
    ptbr: string
    enus: string
    esch: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userCreated: UserCreateNestedOneWithoutCreatedTranslatesInput
  }

  export type TranslateUncheckedCreateWithoutUserUpdatedInput = {
    id?: number
    keyword: string
    ptbr: string
    enus: string
    esch: string
    createdAt?: Date | string
    updatedAt?: Date | string
    idUserCreated: number
  }

  export type TranslateCreateOrConnectWithoutUserUpdatedInput = {
    where: TranslateWhereUniqueInput
    create: XOR<TranslateCreateWithoutUserUpdatedInput, TranslateUncheckedCreateWithoutUserUpdatedInput>
  }

  export type TranslateCreateManyUserUpdatedInputEnvelope = {
    data: TranslateCreateManyUserUpdatedInput | TranslateCreateManyUserUpdatedInput[]
    skipDuplicates?: boolean
  }

  export type TokenUpsertWithWhereUniqueWithoutUserInput = {
    where: TokenWhereUniqueInput
    update: XOR<TokenUpdateWithoutUserInput, TokenUncheckedUpdateWithoutUserInput>
    create: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
  }

  export type TokenUpdateWithWhereUniqueWithoutUserInput = {
    where: TokenWhereUniqueInput
    data: XOR<TokenUpdateWithoutUserInput, TokenUncheckedUpdateWithoutUserInput>
  }

  export type TokenUpdateManyWithWhereWithoutUserInput = {
    where: TokenScalarWhereInput
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyWithoutUserInput>
  }

  export type TokenScalarWhereInput = {
    AND?: TokenScalarWhereInput | TokenScalarWhereInput[]
    OR?: TokenScalarWhereInput[]
    NOT?: TokenScalarWhereInput | TokenScalarWhereInput[]
    accessToken?: StringFilter<"Token"> | string
    accessTokenExpires?: DateTimeFilter<"Token"> | Date | string
    refreshToken?: StringFilter<"Token"> | string
    refreshTokenExpires?: DateTimeFilter<"Token"> | Date | string
    clientName?: StringFilter<"Token"> | string
    username?: StringFilter<"Token"> | string
    scope?: StringFilter<"Token"> | string
    revoked?: BoolFilter<"Token"> | boolean
  }

  export type TranslateUpsertWithWhereUniqueWithoutUserCreatedInput = {
    where: TranslateWhereUniqueInput
    update: XOR<TranslateUpdateWithoutUserCreatedInput, TranslateUncheckedUpdateWithoutUserCreatedInput>
    create: XOR<TranslateCreateWithoutUserCreatedInput, TranslateUncheckedCreateWithoutUserCreatedInput>
  }

  export type TranslateUpdateWithWhereUniqueWithoutUserCreatedInput = {
    where: TranslateWhereUniqueInput
    data: XOR<TranslateUpdateWithoutUserCreatedInput, TranslateUncheckedUpdateWithoutUserCreatedInput>
  }

  export type TranslateUpdateManyWithWhereWithoutUserCreatedInput = {
    where: TranslateScalarWhereInput
    data: XOR<TranslateUpdateManyMutationInput, TranslateUncheckedUpdateManyWithoutUserCreatedInput>
  }

  export type TranslateScalarWhereInput = {
    AND?: TranslateScalarWhereInput | TranslateScalarWhereInput[]
    OR?: TranslateScalarWhereInput[]
    NOT?: TranslateScalarWhereInput | TranslateScalarWhereInput[]
    id?: IntFilter<"Translate"> | number
    keyword?: StringFilter<"Translate"> | string
    ptbr?: StringFilter<"Translate"> | string
    enus?: StringFilter<"Translate"> | string
    esch?: StringFilter<"Translate"> | string
    createdAt?: DateTimeFilter<"Translate"> | Date | string
    updatedAt?: DateTimeFilter<"Translate"> | Date | string
    idUserCreated?: IntFilter<"Translate"> | number
    idUserUpdated?: IntFilter<"Translate"> | number
  }

  export type TranslateUpsertWithWhereUniqueWithoutUserUpdatedInput = {
    where: TranslateWhereUniqueInput
    update: XOR<TranslateUpdateWithoutUserUpdatedInput, TranslateUncheckedUpdateWithoutUserUpdatedInput>
    create: XOR<TranslateCreateWithoutUserUpdatedInput, TranslateUncheckedCreateWithoutUserUpdatedInput>
  }

  export type TranslateUpdateWithWhereUniqueWithoutUserUpdatedInput = {
    where: TranslateWhereUniqueInput
    data: XOR<TranslateUpdateWithoutUserUpdatedInput, TranslateUncheckedUpdateWithoutUserUpdatedInput>
  }

  export type TranslateUpdateManyWithWhereWithoutUserUpdatedInput = {
    where: TranslateScalarWhereInput
    data: XOR<TranslateUpdateManyMutationInput, TranslateUncheckedUpdateManyWithoutUserUpdatedInput>
  }

  export type UserCreateWithoutCreatedTranslatesInput = {
    username: string
    name: string
    secondname: string
    password: string
    gener: Avatar
    type: UserType
    theme?: ThemePage
    status: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    idUserCreated: number
    idUserUpdated: number
    Token?: TokenCreateNestedManyWithoutUserInput
    updatedTranslates?: TranslateCreateNestedManyWithoutUserUpdatedInput
  }

  export type UserUncheckedCreateWithoutCreatedTranslatesInput = {
    id?: number
    username: string
    name: string
    secondname: string
    password: string
    gener: Avatar
    type: UserType
    theme?: ThemePage
    status: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    idUserCreated: number
    idUserUpdated: number
    Token?: TokenUncheckedCreateNestedManyWithoutUserInput
    updatedTranslates?: TranslateUncheckedCreateNestedManyWithoutUserUpdatedInput
  }

  export type UserCreateOrConnectWithoutCreatedTranslatesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedTranslatesInput, UserUncheckedCreateWithoutCreatedTranslatesInput>
  }

  export type UserCreateWithoutUpdatedTranslatesInput = {
    username: string
    name: string
    secondname: string
    password: string
    gener: Avatar
    type: UserType
    theme?: ThemePage
    status: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    idUserCreated: number
    idUserUpdated: number
    Token?: TokenCreateNestedManyWithoutUserInput
    createdTranslates?: TranslateCreateNestedManyWithoutUserCreatedInput
  }

  export type UserUncheckedCreateWithoutUpdatedTranslatesInput = {
    id?: number
    username: string
    name: string
    secondname: string
    password: string
    gener: Avatar
    type: UserType
    theme?: ThemePage
    status: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    idUserCreated: number
    idUserUpdated: number
    Token?: TokenUncheckedCreateNestedManyWithoutUserInput
    createdTranslates?: TranslateUncheckedCreateNestedManyWithoutUserCreatedInput
  }

  export type UserCreateOrConnectWithoutUpdatedTranslatesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedTranslatesInput, UserUncheckedCreateWithoutUpdatedTranslatesInput>
  }

  export type UserUpsertWithoutCreatedTranslatesInput = {
    update: XOR<UserUpdateWithoutCreatedTranslatesInput, UserUncheckedUpdateWithoutCreatedTranslatesInput>
    create: XOR<UserCreateWithoutCreatedTranslatesInput, UserUncheckedCreateWithoutCreatedTranslatesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedTranslatesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedTranslatesInput, UserUncheckedUpdateWithoutCreatedTranslatesInput>
  }

  export type UserUpdateWithoutCreatedTranslatesInput = {
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    secondname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gener?: EnumAvatarFieldUpdateOperationsInput | Avatar
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    theme?: EnumThemePageFieldUpdateOperationsInput | ThemePage
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idUserCreated?: IntFieldUpdateOperationsInput | number
    idUserUpdated?: IntFieldUpdateOperationsInput | number
    Token?: TokenUpdateManyWithoutUserNestedInput
    updatedTranslates?: TranslateUpdateManyWithoutUserUpdatedNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedTranslatesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    secondname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gener?: EnumAvatarFieldUpdateOperationsInput | Avatar
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    theme?: EnumThemePageFieldUpdateOperationsInput | ThemePage
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idUserCreated?: IntFieldUpdateOperationsInput | number
    idUserUpdated?: IntFieldUpdateOperationsInput | number
    Token?: TokenUncheckedUpdateManyWithoutUserNestedInput
    updatedTranslates?: TranslateUncheckedUpdateManyWithoutUserUpdatedNestedInput
  }

  export type UserUpsertWithoutUpdatedTranslatesInput = {
    update: XOR<UserUpdateWithoutUpdatedTranslatesInput, UserUncheckedUpdateWithoutUpdatedTranslatesInput>
    create: XOR<UserCreateWithoutUpdatedTranslatesInput, UserUncheckedCreateWithoutUpdatedTranslatesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedTranslatesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedTranslatesInput, UserUncheckedUpdateWithoutUpdatedTranslatesInput>
  }

  export type UserUpdateWithoutUpdatedTranslatesInput = {
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    secondname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gener?: EnumAvatarFieldUpdateOperationsInput | Avatar
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    theme?: EnumThemePageFieldUpdateOperationsInput | ThemePage
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idUserCreated?: IntFieldUpdateOperationsInput | number
    idUserUpdated?: IntFieldUpdateOperationsInput | number
    Token?: TokenUpdateManyWithoutUserNestedInput
    createdTranslates?: TranslateUpdateManyWithoutUserCreatedNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedTranslatesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    secondname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gener?: EnumAvatarFieldUpdateOperationsInput | Avatar
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    theme?: EnumThemePageFieldUpdateOperationsInput | ThemePage
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idUserCreated?: IntFieldUpdateOperationsInput | number
    idUserUpdated?: IntFieldUpdateOperationsInput | number
    Token?: TokenUncheckedUpdateManyWithoutUserNestedInput
    createdTranslates?: TranslateUncheckedUpdateManyWithoutUserCreatedNestedInput
  }

  export type ClientCreateWithoutTokensInput = {
    name: string
    secret: string
  }

  export type ClientUncheckedCreateWithoutTokensInput = {
    id?: number
    name: string
    secret: string
  }

  export type ClientCreateOrConnectWithoutTokensInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutTokensInput, ClientUncheckedCreateWithoutTokensInput>
  }

  export type UserCreateWithoutTokenInput = {
    username: string
    name: string
    secondname: string
    password: string
    gener: Avatar
    type: UserType
    theme?: ThemePage
    status: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    idUserCreated: number
    idUserUpdated: number
    createdTranslates?: TranslateCreateNestedManyWithoutUserCreatedInput
    updatedTranslates?: TranslateCreateNestedManyWithoutUserUpdatedInput
  }

  export type UserUncheckedCreateWithoutTokenInput = {
    id?: number
    username: string
    name: string
    secondname: string
    password: string
    gener: Avatar
    type: UserType
    theme?: ThemePage
    status: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    idUserCreated: number
    idUserUpdated: number
    createdTranslates?: TranslateUncheckedCreateNestedManyWithoutUserCreatedInput
    updatedTranslates?: TranslateUncheckedCreateNestedManyWithoutUserUpdatedInput
  }

  export type UserCreateOrConnectWithoutTokenInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTokenInput, UserUncheckedCreateWithoutTokenInput>
  }

  export type ClientUpsertWithoutTokensInput = {
    update: XOR<ClientUpdateWithoutTokensInput, ClientUncheckedUpdateWithoutTokensInput>
    create: XOR<ClientCreateWithoutTokensInput, ClientUncheckedCreateWithoutTokensInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutTokensInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutTokensInput, ClientUncheckedUpdateWithoutTokensInput>
  }

  export type ClientUpdateWithoutTokensInput = {
    name?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
  }

  export type ClientUncheckedUpdateWithoutTokensInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutTokenInput = {
    update: XOR<UserUpdateWithoutTokenInput, UserUncheckedUpdateWithoutTokenInput>
    create: XOR<UserCreateWithoutTokenInput, UserUncheckedCreateWithoutTokenInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTokenInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTokenInput, UserUncheckedUpdateWithoutTokenInput>
  }

  export type UserUpdateWithoutTokenInput = {
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    secondname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gener?: EnumAvatarFieldUpdateOperationsInput | Avatar
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    theme?: EnumThemePageFieldUpdateOperationsInput | ThemePage
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idUserCreated?: IntFieldUpdateOperationsInput | number
    idUserUpdated?: IntFieldUpdateOperationsInput | number
    createdTranslates?: TranslateUpdateManyWithoutUserCreatedNestedInput
    updatedTranslates?: TranslateUpdateManyWithoutUserUpdatedNestedInput
  }

  export type UserUncheckedUpdateWithoutTokenInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    secondname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gener?: EnumAvatarFieldUpdateOperationsInput | Avatar
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    theme?: EnumThemePageFieldUpdateOperationsInput | ThemePage
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idUserCreated?: IntFieldUpdateOperationsInput | number
    idUserUpdated?: IntFieldUpdateOperationsInput | number
    createdTranslates?: TranslateUncheckedUpdateManyWithoutUserCreatedNestedInput
    updatedTranslates?: TranslateUncheckedUpdateManyWithoutUserUpdatedNestedInput
  }

  export type TokenCreateWithoutClientInput = {
    accessToken: string
    accessTokenExpires: Date | string
    refreshToken: string
    refreshTokenExpires: Date | string
    scope: string
    revoked?: boolean
    user: UserCreateNestedOneWithoutTokenInput
  }

  export type TokenUncheckedCreateWithoutClientInput = {
    accessToken: string
    accessTokenExpires: Date | string
    refreshToken: string
    refreshTokenExpires: Date | string
    username: string
    scope: string
    revoked?: boolean
  }

  export type TokenCreateOrConnectWithoutClientInput = {
    where: TokenWhereUniqueInput
    create: XOR<TokenCreateWithoutClientInput, TokenUncheckedCreateWithoutClientInput>
  }

  export type TokenCreateManyClientInputEnvelope = {
    data: TokenCreateManyClientInput | TokenCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type TokenUpsertWithWhereUniqueWithoutClientInput = {
    where: TokenWhereUniqueInput
    update: XOR<TokenUpdateWithoutClientInput, TokenUncheckedUpdateWithoutClientInput>
    create: XOR<TokenCreateWithoutClientInput, TokenUncheckedCreateWithoutClientInput>
  }

  export type TokenUpdateWithWhereUniqueWithoutClientInput = {
    where: TokenWhereUniqueInput
    data: XOR<TokenUpdateWithoutClientInput, TokenUncheckedUpdateWithoutClientInput>
  }

  export type TokenUpdateManyWithWhereWithoutClientInput = {
    where: TokenScalarWhereInput
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyWithoutClientInput>
  }

  export type TokenCreateManyUserInput = {
    accessToken: string
    accessTokenExpires: Date | string
    refreshToken: string
    refreshTokenExpires: Date | string
    clientName: string
    scope: string
    revoked?: boolean
  }

  export type TranslateCreateManyUserCreatedInput = {
    id?: number
    keyword: string
    ptbr: string
    enus: string
    esch: string
    createdAt?: Date | string
    updatedAt?: Date | string
    idUserUpdated: number
  }

  export type TranslateCreateManyUserUpdatedInput = {
    id?: number
    keyword: string
    ptbr: string
    enus: string
    esch: string
    createdAt?: Date | string
    updatedAt?: Date | string
    idUserCreated: number
  }

  export type TokenUpdateWithoutUserInput = {
    accessToken?: StringFieldUpdateOperationsInput | string
    accessTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    refreshTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    scope?: StringFieldUpdateOperationsInput | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    client?: ClientUpdateOneRequiredWithoutTokensNestedInput
  }

  export type TokenUncheckedUpdateWithoutUserInput = {
    accessToken?: StringFieldUpdateOperationsInput | string
    accessTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    refreshTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    clientName?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TokenUncheckedUpdateManyWithoutUserInput = {
    accessToken?: StringFieldUpdateOperationsInput | string
    accessTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    refreshTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    clientName?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TranslateUpdateWithoutUserCreatedInput = {
    keyword?: StringFieldUpdateOperationsInput | string
    ptbr?: StringFieldUpdateOperationsInput | string
    enus?: StringFieldUpdateOperationsInput | string
    esch?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userUpdated?: UserUpdateOneRequiredWithoutUpdatedTranslatesNestedInput
  }

  export type TranslateUncheckedUpdateWithoutUserCreatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    keyword?: StringFieldUpdateOperationsInput | string
    ptbr?: StringFieldUpdateOperationsInput | string
    enus?: StringFieldUpdateOperationsInput | string
    esch?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idUserUpdated?: IntFieldUpdateOperationsInput | number
  }

  export type TranslateUncheckedUpdateManyWithoutUserCreatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    keyword?: StringFieldUpdateOperationsInput | string
    ptbr?: StringFieldUpdateOperationsInput | string
    enus?: StringFieldUpdateOperationsInput | string
    esch?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idUserUpdated?: IntFieldUpdateOperationsInput | number
  }

  export type TranslateUpdateWithoutUserUpdatedInput = {
    keyword?: StringFieldUpdateOperationsInput | string
    ptbr?: StringFieldUpdateOperationsInput | string
    enus?: StringFieldUpdateOperationsInput | string
    esch?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userCreated?: UserUpdateOneRequiredWithoutCreatedTranslatesNestedInput
  }

  export type TranslateUncheckedUpdateWithoutUserUpdatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    keyword?: StringFieldUpdateOperationsInput | string
    ptbr?: StringFieldUpdateOperationsInput | string
    enus?: StringFieldUpdateOperationsInput | string
    esch?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idUserCreated?: IntFieldUpdateOperationsInput | number
  }

  export type TranslateUncheckedUpdateManyWithoutUserUpdatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    keyword?: StringFieldUpdateOperationsInput | string
    ptbr?: StringFieldUpdateOperationsInput | string
    enus?: StringFieldUpdateOperationsInput | string
    esch?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idUserCreated?: IntFieldUpdateOperationsInput | number
  }

  export type TokenCreateManyClientInput = {
    accessToken: string
    accessTokenExpires: Date | string
    refreshToken: string
    refreshTokenExpires: Date | string
    username: string
    scope: string
    revoked?: boolean
  }

  export type TokenUpdateWithoutClientInput = {
    accessToken?: StringFieldUpdateOperationsInput | string
    accessTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    refreshTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    scope?: StringFieldUpdateOperationsInput | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutTokenNestedInput
  }

  export type TokenUncheckedUpdateWithoutClientInput = {
    accessToken?: StringFieldUpdateOperationsInput | string
    accessTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    refreshTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TokenUncheckedUpdateManyWithoutClientInput = {
    accessToken?: StringFieldUpdateOperationsInput | string
    accessTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    refreshTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}